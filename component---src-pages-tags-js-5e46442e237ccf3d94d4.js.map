{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es7.object.entries.js","webpack:///./node_modules/core-js/modules/_object-to-array.js","webpack:///./src/pages/tags.js","webpack:///./node_modules/core-js/modules/es7.object.values.js"],"names":["$export","$entries","S","entries","it","DESCRIPTORS","getKeys","toIObject","isEnum","f","module","exports","isEntries","key","O","keys","length","i","result","call","push","StyledTagLink","styled","Link","TagsPage","data","group","allMarkdownRemark","title","site","siteMetadata","alphabet","React","useState","split","existingTagsWithAlphabet","setExistingTagsWithAlphabet","useEffect","findExistingTags","forEach","char","regex","RegExp","filtered","filter","tag","test","fieldValue","map","tags","totalCount","elems","Object","console","log","toUpperCase","to","count","values","pageQuery","$values"],"mappings":"gFACA,IAAIA,EAAU,EAAQ,QAClBC,EAAW,EAAQ,OAAR,EAA8B,GAE7CD,EAAQA,EAAQE,EAAG,SAAU,CAC3BC,QAAS,SAAiBC,GACxB,OAAOH,EAASG,O,qBCNpB,IAAIC,EAAc,EAAQ,QACtBC,EAAU,EAAQ,QAClBC,EAAY,EAAQ,QACpBC,EAAS,EAAQ,QAAiBC,EACtCC,EAAOC,QAAU,SAAUC,GACzB,OAAO,SAAUR,GAOf,IANA,IAKIS,EALAC,EAAIP,EAAUH,GACdW,EAAOT,EAAQQ,GACfE,EAASD,EAAKC,OACdC,EAAI,EACJC,EAAS,GAENF,EAASC,GACdJ,EAAME,EAAKE,KACNZ,IAAeG,EAAOW,KAAKL,EAAGD,IACjCK,EAAOE,KAAKR,EAAY,CAACC,EAAKC,EAAED,IAAQC,EAAED,IAG9C,OAAOK,K,yaCXX,IAAMG,EAAgBC,YAAOC,OAAPD,CAAH,KA8EJE,UAxEE,SAAC,GAOX,IAAD,IANJC,KACuBC,EAKnB,EALFC,kBAAqBD,MAEHE,EAGhB,EAJFC,KACEC,aAAgBF,MAIbG,EAAYC,IAAMC,SAAS,6BAA6BC,MAAM,KADjE,KAE4DF,IAAMC,SAAS,IAAxEE,EAFH,KAE6BC,EAF7B,KAIJJ,IAAMK,WAAU,WACd,IAAIC,EAAmB,GACvBP,EAASQ,SAAQ,SAAAC,GACf,IAAIC,EAAQ,IAAIC,OAAJ,IAAeF,EAAQ,KAC/BG,EAAWjB,EAAMkB,QAAO,SAAAC,GAC1B,OAAOJ,EAAMK,KAAKD,EAAIE,eAGpBJ,EAAS3B,OAAS,IACpBsB,EAAiBE,GAAQ,GACzBF,EAAiBE,GAAjB,KAAiCG,EAASK,KAAI,SAAAC,GAAI,OAAIA,EAAKF,cAC3DT,EAAiBE,GAAjB,MAAkCG,EAASK,KAAI,SAAAC,GAAI,OAAIA,EAAKC,kBAGhEd,EAA4BE,KAC3B,IAEH,IAAIa,EAAQC,OAAOjD,QAAQgC,GAA0Ba,KAAI,YAAmB,IAAjBR,EAAgB,KAAVf,EAAU,KAEzE,OADA4B,QAAQC,IAAId,EAAMf,GAEhB,yBAAKZ,IAAK2B,GACR,4BAAKA,EAAKe,eACT9B,EAAKwB,KAAKD,KAAI,SAACH,EAAK5B,GACnB,OACE,kBAACI,EAAD,CAAemC,GAAE,SAAWX,EAAX,KACdA,EADH,KACUpB,EAAKgC,MAAMxC,GADrB,YASV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKW,MAAOA,IACZ,6BACE,wCACCwB,OAAOM,OAAOvB,GAA0BnB,QAAUmC,KAyBpD,IAAMQ,EAAS,c,qBCtFtB,IAAI3D,EAAU,EAAQ,QAClB4D,EAAU,EAAQ,OAAR,EAA8B,GAE5C5D,EAAQA,EAAQE,EAAG,SAAU,CAC3BwD,OAAQ,SAAgBtD,GACtB,OAAOwD,EAAQxD","file":"component---src-pages-tags-js-5e46442e237ccf3d94d4.js","sourcesContent":["// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n","import styled from '@emotion/styled';\nimport { graphql, Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nconst StyledTagLink = styled(Link)`\n  margin: 1rem;\n  text-decoration: none;\n  border-bottom: 1px solid var(--link-color);\n`;\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => {\n  const [alphabet] = React.useState('abcdefghijklmnopqrstuvwxyz'.split(''));\n  const [existingTagsWithAlphabet, setExistingTagsWithAlphabet] = React.useState({});\n\n  React.useEffect(() => {\n    let findExistingTags = {};\n    alphabet.forEach(char => {\n      let regex = new RegExp(`^${char}`, 'i');\n      let filtered = group.filter(tag => {\n        return regex.test(tag.fieldValue);\n      });\n\n      if (filtered.length > 0) {\n        findExistingTags[char] = {};\n        findExistingTags[char]['tags'] = filtered.map(tags => tags.fieldValue);\n        findExistingTags[char]['count'] = filtered.map(tags => tags.totalCount);\n      }\n    });\n    setExistingTagsWithAlphabet(findExistingTags);\n  }, []);\n\n  let elems = Object.entries(existingTagsWithAlphabet).map(([char, data]) => {\n    console.log(char, data);\n    return (\n      <div key={char}>\n        <h2>{char.toUpperCase()}</h2>\n        {data.tags.map((tag, i) => {\n          return (\n            <StyledTagLink to={`/tags/${tag}/`}>\n              {tag} ({data.count[i]})\n            </StyledTagLink>\n          );\n        })}\n      </div>\n    );\n  });\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <div>\n        <h1>All Tags</h1>\n        {Object.values(existingTagsWithAlphabet).length && elems}\n      </div>\n    </Layout>\n  );\n};\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n};\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n"],"sourceRoot":""}